{"version":3,"sources":["components/NavBarToggle.js","components/NavBar.js","components/App.js","serviceWorker.js","index.js"],"names":["NavBarToggle","props","onClick","setState","state","isToggled","this","Component","NavBar","onNavBarToggleClick","showLinks","className","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mRAuBeA,G,8DAnBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAIVC,QAAU,WACN,EAAKD,MAAMC,UACX,EAAKC,UAAS,SAAAC,GACVA,EAAMC,WAAaD,EAAMC,cAN7B,EAAKD,MAAQ,CAACC,WAAW,GAFV,E,qDAaf,OAAO,4BAAQH,QAASI,KAAKL,MAAMC,SAC9BI,KAAKF,MAAMC,UAAY,KAAO,W,GAfhBE,cCoCZC,E,kDAjCX,WAAYP,GAAQ,IAAD,8BACf,cAAMA,IAMVQ,oBAAsB,WAClB,EAAKN,UAAS,SAAAC,GACVA,EAAMM,WAAaN,EAAMM,cAP7B,EAAKN,MAAQ,CACTM,WAAW,GAHA,E,qDAgBf,OAFkBJ,KAAKF,MAAMM,UAGlB,wBAAIC,UAAU,UACjB,4BAAI,4CACJ,4BAAI,kBAAC,EAAD,CAAcT,QAAWI,KAAKG,uBAClC,4BAAI,uBAAGG,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,KAAR,cACJ,4BAAI,uBAAGA,KAAK,KAAR,YAGD,wBAAID,UAAU,UACjB,4BAAI,4CACJ,4BAAI,kBAAC,EAAD,CAAcT,QAAWI,KAAKG,4B,GA5B7BF,aC0BNM,E,kDAzBb,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IACDG,MAAQ,GAFI,E,qDAMjB,OAAO,yBAAKO,UAAU,OACpB,kBAAC,EAAD,MACA,6BACE,ykG,GAVUJ,aCOEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.eaef5fbe.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport NavBar from './NavBar';\r\n\r\nclass NavBarToggle extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {isToggled: false};\r\n    }\r\n\r\n    onClick = () => {\r\n        this.props.onClick();\r\n        this.setState(state => {\r\n            state.isToggled = !state.isToggled\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return <button onClick={this.props.onClick}>\r\n            {this.state.isToggled ? 'ON' : 'OFF'}\r\n        </button>\r\n    }\r\n}\r\n\r\nexport default NavBarToggle;","import React, { Component } from 'react';\r\nimport '../styles/NavBar.css'\r\n\r\nimport NavBarToggle from './NavBarToggle';\r\n\r\nclass NavBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showLinks: false\r\n        };\r\n    }\r\n\r\n    onNavBarToggleClick = () => {\r\n        this.setState(state => {\r\n            state.showLinks = !state.showLinks\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const showLinks = this.state.showLinks;\r\n\r\n        if (showLinks) {\r\n            return <ul className=\"NavBar\">\r\n                <li><p>Igor Barinov</p></li>\r\n                <li><NavBarToggle onClick = {this.onNavBarToggleClick}></NavBarToggle></li>\r\n                <li><a href=\"/\">Home</a></li>\r\n                <li><a href=\"/\">Portfolio</a></li>\r\n                <li><a href=\"/\">Resume</a></li>\r\n            </ul>\r\n        } else {\r\n            return <ul className=\"NavBar\">\r\n                <li><p>Igor Barinov</p></li>\r\n                <li><NavBarToggle onClick = {this.onNavBarToggleClick}></NavBarToggle></li>\r\n            </ul>\r\n        }\r\n    }\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from 'react';\nimport '../styles/App.css';\n\nimport NavBar from './NavBar';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return <div className=\"App\">\n      <NavBar></NavBar>\n      <div>\n        <p>\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus pretium lacus et sapien maximus semper. Curabitur nec massa dignissim, porttitor libero at, consectetur justo. Cras quis nisl non lacus facilisis dapibus. Mauris tristique nibh nec gravida sollicitudin. Pellentesque a est libero. Vivamus commodo tincidunt facilisis. Donec suscipit sem neque, vel hendrerit sapien iaculis ut.\n\nVestibulum id convallis dui. Morbi lobortis, massa a pharetra maximus, ante libero aliquam nulla, et interdum erat sem ut felis. Aenean luctus suscipit orci a pharetra. Aenean id dolor sit amet dolor efficitur dapibus. In massa quam, vulputate eget nisl et, pulvinar interdum nisi. Nunc cursus pretium augue quis vehicula. Quisque vel nunc eros. Nunc placerat arcu vitae mi tincidunt suscipit. Duis eget eros ut risus rutrum ultrices a at tortor. Nullam sed hendrerit justo. Donec nunc enim, volutpat vitae risus ac, pellentesque suscipit massa.\n\nSed rhoncus tincidunt iaculis. Etiam urna sem, sollicitudin id velit eget, varius mattis neque. Aliquam rhoncus mi sed auctor pellentesque. Quisque dictum molestie turpis a lacinia. Pellentesque elit quam, ornare quis placerat et, molestie eget odio. Pellentesque ornare risus quis diam hendrerit, et ultricies tortor condimentum. Suspendisse eros quam, elementum non cursus sed, sagittis vitae nisl. Nunc eget libero scelerisque, tempor odio at, venenatis magna. Suspendisse congue fermentum sem, eu egestas odio placerat eu. Praesent semper egestas elit, vel accumsan felis facilisis semper. Curabitur commodo vulputate vulputate. Phasellus fringilla mollis lacus, molestie varius tellus aliquam ac. Proin gravida arcu sem, sed lobortis tellus tempus quis. Donec lobortis ipsum sit amet tortor interdum, sed dignissim augue elementum. Duis dignissim odio lobortis lectus aliquet, et sollicitudin ligula ultrices.\n\nPraesent sed erat sem. Proin facilisis arcu et posuere sodales. Nam tempus sed neque sit amet molestie. Vestibulum blandit venenatis suscipit. Sed nisi odio, tincidunt vitae lacinia feugiat, sodales at tellus. Nam condimentum tellus eu felis pretium imperdiet. Curabitur finibus metus sed ex tempor tristique. Donec in metus sed nisi ornare dignissim. Sed ullamcorper elit nec lorem laoreet, id venenatis lacus rhoncus. Phasellus eget arcu sit amet lorem commodo porttitor. Nullam quis vestibulum ipsum. Morbi vulputate, enim cursus faucibus sagittis, libero dolor mattis lacus, sed sollicitudin nulla elit at nisi. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae;\nPhasellus id nibh accumsan, ultricies metus nec, consequat augue. Fusce fermentum bibendum urna, consequat euismod elit luctus eu. Proin volutpat ultricies massa. Curabitur turpis nisi, iaculis ut malesuada non, vehicula at nulla. Suspendisse potenti. Etiam scelerisque non mi at ultricies. Duis posuere non risus a varius. Integer nec purus tristique nulla consequat venenatis. Sed quis erat metus. Etiam velit leo, rutrum in accumsan eget, aliquet id enim. \n        </p>\n      </div>\n    </div>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}